name: Create Release

on:
  workflow_dispatch:
    inputs:
      draft:
        type: choice
        description: "Create the release as draft"
        options: 
          - "yes"
          - "no"
        default: "no"
        required: true
      force:
        type: choice
        description: "Force the creation of a release (even if no PR are found)"
        options: 
          - "yes"
          - "no"
        default: "no"
        required: true

env:
  POETRY_HOME: /opt/poetry

jobs:

  release:
    runs-on: ubuntu-22.04
    permissions:
      actions: write
      contents: write
      packages: write
      pull-requests: write
    outputs:
      tag: ${{ steps.output.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # we need this because fetch-tags=true and because of a GHA bug: https://github.com/actions/checkout/issues/1471
          fetch-tags: true
      - id: create-release
        uses: fabien-marty/github-create-next-semantic-release-action@v1
        with:
          github-token: ${{ github.token }} # Let's use the default value of the current workflow
          repository: ${{ github.repository }} # Let's use the default value of the current workflow
          repository-owner: ${{ github.repository_owner }} # Let's use the default value of the current workflow
          release-force: ${{ github.event.inputs.force == 'yes' }}
          release-draft: ${{ github.event.inputs.draft == 'yes' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Set output
        id: output
        run: |
          echo "tag=${{ steps.create-release.outputs.new-tag}}" >>"$GITHUB_OUTPUT"
      - name: Trigger changelog
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh workflow run changelog.yml

  publish_pypi:
    runs-on: ubuntu-22.04
    needs: release
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      - name: Install poetry
        run: |
          python3 -m venv $POETRY_HOME
          $POETRY_HOME/bin/pip install "poetry>=1.8.4,<1.9"
      - name: Fix github path
        run: |
          echo "$POETRY_HOME/bin" >> "$GITHUB_PATH"
      - name: Install requirements
        run: |
          poetry install
      - name: Publish on Pypi
        run: |
          VERSION=`echo "${{ needs.release.outputs.tag }}" |sed 's/^v//g'`
          cat pyproject.toml |sed 's/^version = ".*"$/version = "'${VERSION}'"/g' > pyproject.toml.new
          mv -f pyproject.toml.new pyproject.toml
          cat pyproject.toml |grep ^version
          poetry config pypi-token.pypi "${{ secrets.PYPI_TOKEN }}"
          poetry build
          poetry publish
